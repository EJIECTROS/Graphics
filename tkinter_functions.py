import tkinter as tk
import time
import random

win = tk.Tk()
photo = tk.PhotoImage(file='venv/fun.jpg')# указываем путь для картинки
win.iconphoto(False, photo) #указываем фотку для лого
win.config(bg="#f2a552") # задаем задний фон
win.title('графическое приложение')
win.geometry("600x500+700+50")
win.resizable(True,True) # можем запретить или разрешить расширение или уменьшение окна
win.minsize(100,100)# указваем минимальный размер окна
win.maxsize(500,500)# задаем максимальный размер окна
label = tk.Label(text='''Приветствую 
в моей первой
программе''',
                    font = ("Arial", 10,'bold'),
                    foreground="white",
                    background='black',
                    width=15, #ширина ( сколько символов поместится )
                    height=2, #высота ( сколько символов поместится )
                    padx = 20, # (отступы от краев) x - по ширине
                    pady= 20,# (отступы от краев) y - по высоте
                    anchor="s", # n-вверху  s-внизу w-слева e- справа ( так же можно комбинировать, на пример sw)
                    relief= tk.RAISED, #обтекание кнопки по краям(четкие границы, по умолчанию идут 2пикселя)
                    bd= 0,# ширина обтикания кнопки
                    justify= tk.CENTER,# Выравнивание текста по центру либо сторонам, применяется в случае использования '''МНОГОСТРОЧНОЙ СТРОКИ'''
                    )
label.pack()# метод .pack открывает нам .Label

def say_hello():
    print('hello')
btn1 = tk.Button(text='''Тестовая 
кнопка 1''',
                    font = ("Arial", 10,'bold'),# стиль, размер текста, жирный или нет
                    foreground="white",
                    background='grey',
                    width=15, #ширина ( сколько символов поместится )
                    height=1, #высота ( сколько символов поместится )
                    padx = 15, # (отступы от краев) x - по ширине
                    pady= 15,# (отступы от краев) y - по высоте
                    anchor="s", # n-вверху  s-внизу w-слева e- справа ( так же можно комбинировать, на пример sw)
                    relief= tk.RAISED, #обтекание кнопки по краям(четкие границы, по умолчанию идут 2пикселя)
                    bd= 15,# ширина обтикания кнопки
                    justify= tk.CENTER,# Выравнивание текста по центру либо сторонам, применяется в случае использования '''МНОГОСТРОЧНОЙ СТРОКИ'''
                    command= say_hello, #задаем команду кнопке, необходимо подключать функцию без ()

                    )
btn1.pack()# метод .pack открывает нам кнопку

def add_label():
    label = tk.Label(win, text= "add new text",)
    label.pack()

btn2 = tk.Button(win, text="Кнопка 2",
                command= add_label,

                )
btn2.pack()# открываем вторую кнопку

btn3 = tk.Button(win, text="Кнопка 3",
                command= lambda:tk.Label(win, text= "Lambda 1",).pack()

                )
btn3.pack()# открываем третью кнопку
def counter():
    global count
    count += 1
    btn4['text'] = f"Кол-во нажатий {count}"
count = 0
btn4 = tk.Button(win, text= f"Кол-во нажатий {count}",
                command= counter,#каунтер это раннее созданая функция выше


                )
btn4.pack()# открываем четвертую кнопку счетчик


win.mainloop()# указывает Python, что нужно запустить цикл событий Tkinter. Данный метод требуется для событий вроде нажатий на клавиши или кнопки, он также блокирует запуск любого кода, что следует после, пока окно, на котором оно было вызвано, не будет закрыто. Попробуйте закрыть созданное окно, и вы увидите появившуюся в оболочке подсказку.